<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[Android自定义View基础-方法和流程的详解]]></title>
      <url>%2F2015%2F07%2F13%2Fandroid-view-function-and-flow%2F</url>
      <content type="text"><![CDATA[Android系统自身已经提供了众多的widgets控件，但有些时候这些自带的控件并不能满足我们的需求，这时候就得需要自定义View。本片文章主要讲一些自定义View的基础-方法和流程的详解。 文章还在转移当中，尽快转移，敬请谅解]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Android自定义View基础-坐标系、弧度、颜色]]></title>
      <url>%2F2015%2F07%2F11%2Fandroid-view-base%2F</url>
      <content type="text"><![CDATA[Android系统自身已经提供了众多的widgets控件，但有些时候这些自带的控件并不能满足我们的需求，这时候就得需要自定义View。在制作一些复杂炫酷的效果的时候，实际上是将一些简单的东西通过数学上精密的计算组合到一起形成的效果。这其中可能会涉及到画布的相关操作(旋转)，以及一些正余弦函数的计算等，这些内容就会用到一些角度、弧度相关的知识。本片文章主要讲一些自定义View的基础-坐标系、弧度和角度、颜色。 1. View的坐标系Android中View的坐标系是相对于它的父控件而言的。1234getLeft(); //获取子View左上角距父View左侧的距离getTop(); //获取子View左上角距父View顶部的距离getBottom(); //获取子View右下角距父View顶部的距离getRight(); //获取子View右下角距父View左侧的距离 形象点，如下图所示： 2. View的MotionEvent中的getX()、getY()和getRawX()、getRawY()的区别两者区别在于：event.get()的触摸点是相对于所在当前组件的坐标系而言的。event.getRaw()的触摸点是相对于屏幕默认的坐标系而言的。1234event.getX(); //触摸点相对于其所在组件坐标系的坐标event.getX()event.getRawX(); //触摸点相对于屏幕默认坐标系的坐标event.getRawX()event.getY(); //触摸点相对于其所在组件坐标系的坐标event.getY()event.getRawY(); //触摸点相对于屏幕默认坐标系的坐标event.getRawY() 形象点，如下图所示： 3. android中的角度(angle)与弧度(radian)为什么会引入角度和弧度两种概念呢？两者的表示单位的进制是不同的：角度是60进制，弧度是10进制。引入了角度与弧度的概念后，在合适的地方使用合适的单位来描述会更加精确和方便。 角度与弧度的定义角度： 两条射线从圆心向圆周射出，形成一个夹角和夹角正对的一段弧。当这段弧长正好等于圆周长的360分之一时，两条射线的夹角的大小为1度.弧度： 两条射线从圆心向圆周射出，形成一个夹角和夹角正对的一段弧。当这段弧长正好等于圆的半径时，两条射线的夹角大小为1弧度.举个栗子： 角度是60进位制，遇到30°6′这样的角，应该转化为10进制的30.1°。但弧度就不需要，因为弧度本身就是十进制的实数。 角度和弧度的换算关系圆一周对应的角度为360度(角度)，对应的弧度为2π弧度。故得等价关系:360(角度) = 2π(弧度) ==&gt; 180(角度) = π(弧度)由等价关系可得如下换算公式:(注：rad 是弧度， deg 是角度) &nbsp;&nbsp;公式&nbsp;&nbsp; &nbsp;&nbsp;举个栗子&nbsp;&nbsp; rad = deg x π / 180 2π ＝ 360 x π / 180 deg = rad x 180 / π 360 ＝ 2π x 180 / π 注：在数学坐标系中角度增大方向为逆时针方向，而在默认的屏幕坐标系中角度增大方向为顺时针方向。 4. 颜色颜色简单介绍Android支持的颜色模式： &nbsp;&nbsp;颜色模式&nbsp;&nbsp; &nbsp;&nbsp;说明&nbsp;&nbsp; Alpha8 仅有透明通道(8位) RGB565 屏幕默认模式(16位) ARGB4444 四通道低精度(16位) ARGB8888 四通道高精度(32位) 其中字母表示通道类型，数值表示该类型用多少位二进制来描述。如ARGB8888则表示有四个通道(ARGB),每个对应的通道均用8位来描述。注意：我们常用的是ARGB8888和ARGB4444，而在所有的安卓设备屏幕上默认的模式都是RGB565,这一点要留意一下。 以ARGB8888为例介绍颜色定义: &nbsp;&nbsp;通道类型&nbsp;&nbsp; &nbsp;&nbsp;颜色值&nbsp;&nbsp; &nbsp;&nbsp;0(ox00)&nbsp;&nbsp; &nbsp;&nbsp;255(0xff)&nbsp;&nbsp; A(Alpha) 透明度 透明 不透明 R(Red) 红色 无色 红色 G(Green) 绿色 无色 绿色 B(Blue) 蓝色 无色 蓝色 其中 A、R、G、B 的取值范围均为0~255(即16进制的0x00~0xff)A 从ox00到oxff表示从透明到不透明。RGB 从0x00到0xff表示颜色从浅到深。当RGB全取最小值(0或0x000000)时颜色为黑色，全取最大值(255或0xffffff)时颜色为白色 几种创建或使用颜色的方式java代码中定义颜色值：123int color = Color.GRAY; //灰色int color = Color.argb(127, 255, 0, 0); //半透明红色int color = 0xaaff0000; //带有透明度的红色 xml中定义颜色值：在/res/values/color.xml 文件中如下定义：123456789101112131415&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;resources&gt; &lt;!-- 不带透明通道 --&gt; &lt;color name=&quot;red1&quot;&gt;#ff0000&lt;/color&gt; &lt;!-- 带透明通道 --&gt; &lt;color name=&quot;red2&quot;&gt;#ffff0000&lt;/color&gt; &lt;!-- 不带透明通道 --&gt; &lt;color name=&quot;green1&quot;&gt;#00ff00&lt;/color&gt; &lt;!-- 带透明通道 --&gt; &lt;color name=&quot;green2&quot;&gt;#00ff00&lt;/color&gt; &lt;!-- #f00 //低精度 - 不带透明通道红色#af00 //低精度 - 带透明通道红色 #ff0000 //高精度 - 不带透明通道红色#aaff0000 //高精度 - 带透明通道红色 --&gt;&lt;/resources&gt; 颜色混合模式(Alpha通道相关)通过前面介绍我们知道颜色一般都是四个通道(ARGB)的，其中(RGB)控制的是颜色,而A(Alpha)控制的是透明度。因为我们的显示屏是没法透明的，因此最终显示在屏幕上的颜色里可以认为没有Alpha通道。Alpha通道主要在两个图像混合的时候生效。默认情况下，当一个颜色绘制到Canvas上时的混合模式是这样计算的：(RGB通道) 最终颜色 = 绘制的颜色 + (1 - 绘制颜色的透明度) × Canvas上的原有颜色。 注意:1.这里我们一般把每个通道的取值从0(ox00)到255(0xff)映射到0到1的浮点数表示。2.这里等式右边的“绘制的颜色”、“Canvas上的原有颜色” 都是经过预乘了自己的Alpha通道的值。如绘制颜色：0x88ffffff，那么参与运算时的每个颜色通道的值不是1.0，而是(1.0 * 0.5333 = 0.5333)。 (其中0.5333 = 0x88/0xff)使用这种方式的混合，就会造成后绘制的内容以半透明的方式叠在上面的视觉效果。其实还可以有不同的混合模式供我们选择，用Paint.setXfermode，指定不同的PorterDuff.Mode。下表是各个PorterDuff模式的混合计算公式：（D指原本在Canvas上的内容dst，S指绘制输入的内容src，a指alpha通道，c指RGB各个通道） &nbsp;&nbsp;混合模式&nbsp;&nbsp; &nbsp;&nbsp;计算公式&nbsp;&nbsp; ADD Saturate(S + D) CLEAR [0, 0] DARKEN [Sa + Da - SaDa, Sc(1 - Da) + Dc*(1 - Sa) + min(Sc, Dc)] DST [Da, Dc] DST_ATOP [Sa, Sa Dc + Sc (1 - Da)] DST_IN [Sa Da, Sa Dc] DST_OUT [Da (1 - Sa), Dc (1 - Sa)] DST_OVER [Sa + (1 - Sa)Da, Rc = Dc + (1 - Da)Sc] LIGHTEN [Sa + Da - SaDa, Sc(1 - Da) + Dc*(1 - Sa) + max(Sc, Dc)] MULTIPLY [Sa Da, Sc Dc] SCREEN [Sa + Da - Sa Da, Sc + Dc - Sc Dc] SRC [Sa, Sc] SRC_ATOP [Da, Sc Da + (1 - Sa) Dc] SRC_IN [Sa Da, Sc Da] SRC_OUT [Sa (1 - Da), Sc (1 - Da)] SRC_OVER [Sa + (1 - Sa)Da, Rc = Sc + (1 - Sa)Dc] XOR [Sa + Da - 2 Sa Da, Sc (1 - Da) + (1 - Sa) Dc] 用示例图来查看使用不同模式时的混合效果如下（src表示输入的图，dst表示原Canvas上的内容）： 参考资料：安卓自定义View基础-颜色]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Git多账号配置详细介绍]]></title>
      <url>%2F2015%2F06%2F15%2Fmulti-git-config%2F</url>
      <content type="text"><![CDATA[在开发的过程中(git管理)，经常会遇到这样的状况：在Github、Gitlab、Oschina等分别都有账户，为此我们需要为不同的账户生成不同的密钥，那对这些不同的账户和不同的密钥，我们该怎么处理呢？ 一、如何生成ssh密钥1.1 设置Git的user.name和user.email为了生成多账户，这里展示的局部的git配置，并不是全局的账户配置(全局配置：在config后面加上–list)。1234567//github账号$ git config user.name &quot;zlzsam&quot;$ git config user.email &quot;zlzsam@hotmail.com&quot;//gitlab账号$ git config user.name &quot;zhulongzhen&quot;$ git config user.email &quot;45303144@qq.com&quot; 1.2 生成SSH密钥12345//github账号$ ssh-keygen -t rsa -C “zlzsam@hotmail.com”//gitlab账号$ ssh-keygen -t rsa -C “45303144@qq.com” 文件命名后，按2次回车，密码为空。123456789101112131415161718Enter passphrase (empty for no passphrase):Enter same passphrase again:Your identification has been saved in /c/Users/zlzsam/.ssh/github_id_rsa.Your public key has been saved in /c/Users/zlzsam/.ssh/github_id_rsa.pub.The key fingerprint is:SHA256:mRAluu98izlMRIQhaezphUvRHnkEH5HFm+aAX6wtXBU zlzsam@hotmail.comThe key&apos;s randomart image is:+---[RSA 2048]----+| ..ooBB*o E. || =.=o++. . || o =.=o. + || = +.o.Bo || o o.+ OS || o .* o || o.. || ooo. || =o.. |+----[SHA256]-----+ 将上面ssh密钥生成步骤重复一次，最后得到四个文件：github_id_rsa、github_id_rsa.pub和gitlab_id_rsa、gitlab_id_rsa.pub 二、多账号配置在~/.ssh目录下，增加config配置文件(注：无后缀名)，配置规范如下(可配置多个git账号):12345#Host host（Host简称，使用命令ssh host可连接远程服务器，如：ssh github） #User/Email 登录用户名(如：zlzsam/zlzsam@hotmail.com) #HostName 主机名用ip或域名，建议使用域名(如:github.com) #Port 服务器open-ssh端口（默认：22,默认时一般不写此行 #IdentityFile 证书文件路径（如~/.ssh/id_rsa_*) 接下来，举个具体的栗子：1234567891011#github zlzsam@hotmail.comhost github Hostname github.com User zlzsam IdentityFile ~/.ssh/github_id_rsa#gitlab 45303144@qq.comhost gitlab Hostname gitlab.*.com User zhulongzhen IdentityFile ~/.ssh/gitlab_id_rsa 注意事项： 在配置文件中的，IdentityFile文件位置是rsa私钥，不是.pub公钥 push代码的时候注意下，得check下本的user.name和user.email,若没有进行生成操作。建议最好设置一个全局的user.name和user.email,然后需要特定的配置的git仓库，就单独配置(当前配置查询命令:$ git config –list) 三、ssh-add增加新的私钥12345//github账号$ ssh-add ~/.ssh/github_id_rsa//gitlab账号$ ssh-add ~/.ssh/gitlab_id_rsa 该命令如果报错：Could not open a connection to your authentication agent.无法连接到ssh agent，可执行ssh-agent bash命令后再执行ssh-add命令。 上面的配置完成完成，使用命令ssh-add -l可以看到所有的密钥列表,ssh-add的作用主要将密钥添加到 ssh-agent 的高速缓存中，这样在当前会话中就不需要再次输入密码了具体的可以参考SSH Keys)]]></content>
    </entry>

    
  
  
</search>
